@page "/work"
@using Models
@using Business.Repository.IRepository
@using Portfolio_Server.Helper
@inject IWorkRepository _workRepository
@inject NavigationManager _navigationManager
@inject IJSRuntime _jsRuntime
@attribute [Authorize(Roles = Common.SD.Role_Admin)]

<div class="m-4">
    <MudGrid>
        @if (Works != null)
        {
            <MudItem xs="12">
                <MudTable Items="@Works" Dense="true" Hover="true" Bordered="true" Striped="true" Filter="new Func<WorkDTO, bool>(FilterFunc)" @bind-SelectedItem="selectedItem">
                    <ToolBarContent>
                        <MudText Typo="Typo.h6">Work List</MudText>
                        <MudSpacer/>
                        <MudTextField @bind-Value="searchString" Placeholder="Search" Adornment="Adornment.Start" AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
                    </ToolBarContent>
                    <HeaderContent>
                        <MudTh>Title</MudTh>
                        <MudTh>Position</MudTh>
                        <MudTh>From</MudTh>
                        <MudTh>To</MudTh>
                    </HeaderContent>
                    <RowTemplate>
                        <MudTd DataLabel="Title">@context.Title</MudTd>
                        <MudTd DataLabel="Position">@context.Position</MudTd>
                        <MudTd DataLabel="From">@context.StartDate.Value.ToString("yyyy MMM")</MudTd>
                        <MudTd DataLabel="To">@(context.Current == true ? "Present" : context.EndDate.Value.ToString("yyyy MMM"))</MudTd>
                    </RowTemplate>
                    <PagerContent>
                        <MudTablePager/>
                    </PagerContent>
                </MudTable>
            </MudItem>
        }
        <MudItem xs="12" Class="d-flex justify-end">
            <MudButton Link="work/create" Variant="Variant.Outlined" Color="Color.Primary" Class="ml-3">Add</MudButton>
            @if (selectedItem != null)
            {
                <MudButton Link="@($"/work/edit/{selectedItem.Id}")" Variant="Variant.Outlined" Color="Color.Success" Class="ml-3">Edit</MudButton>
                <MudButton @onclick="() => HandleDelete()" Variant="Variant.Outlined" Color="Color.Error" Class="ml-3">Delete</MudButton>
            }

        </MudItem>
    </MudGrid>
</div>

<DeleteConfirmation @ref="DeleteConfirm" ConfirmationChanged="ConfirmDelete_Click" IsParentComponentProcessing="IsProcessing"></DeleteConfirmation>

@code{
    private IEnumerable<WorkDTO> Works { get; set; } = new List<WorkDTO>();
    private WorkDTO selectedItem { get; set; }
    private string searchString = "";
    private DeleteConfirmation DeleteConfirm { get; set; }
    private bool IsProcessing { get; set; } = false;

    protected override async Task OnInitializedAsync()
    {
        Works = await _workRepository.GetAllWorkExperience();
        if (Works == null)
        {
            _navigationManager.NavigateTo("/work/create");
        }
    }

    private bool FilterFunc(WorkDTO element)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;
        if (element.Title.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        if (element.Position.Contains(searchString, StringComparison.OrdinalIgnoreCase))
            return true;
        return false;
    }

    private async Task HandleDelete()
    {
        DeleteConfirm.Show();
    }

    public async Task ConfirmDelete_Click(bool isConfirmed)
    {
        IsProcessing = true;
        if (isConfirmed)
        {
            await _workRepository.DeleteWork(selectedItem.Id);
            await _jsRuntime.ToastrSuccess("Hotel Room Deleted successfully");
            Works = await _workRepository.GetAllWorkExperience();
        }
        IsProcessing = false;
    }

}